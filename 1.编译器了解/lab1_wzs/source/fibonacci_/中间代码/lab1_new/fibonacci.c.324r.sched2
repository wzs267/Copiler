
;; Function main (main, funcdef_no=23, decl_uid=3375, cgraph_uid=24, symbol_order=23) (executed once)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 8 n_edges 9 count 11 (  1.4)


main

Dataflow summary:
def_info->table_size = 313, use_info->table_size = 0
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9] 40 [r12] 41 [r13] 42 [r14]
;;  exit block uses 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 40 [r12] 41 [r13] 42 [r14]
;;  regs ever live 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 40 [r12] 41 [r13] 42 [r14]
;;  ref usage 	r0={9d,5u} r1={8d,3u} r2={5d} r3={5d,7u} r4={8d,3u} r5={9d,4u} r6={5d,5u} r7={11d,21u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r17={14d,2u} r18={4d} r20={5d} r21={5d} r22={5d} r23={5d} r24={5d} r25={5d} r26={5d} r27={5d} r28={4d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={5d} r37={5d} r38={4d} r39={4d} r40={4d,4u} r41={4d,4u} r42={3d,4u} r44={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} 
;;    total ref usage 401{339d,62u,0e} in 47{43 regular + 4 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(20){ }d-1(21){ }d-1(22){ }d-1(23){ }d-1(24){ }d-1(25){ }d-1(26){ }d-1(27){ }d-1(36){ }d-1(37){ }d-1(40){ }d-1(41){ }d-1(42){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9] 40 [r12] 41 [r13] 42 [r14]
;; live  in  	
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9] 40 [r12] 41 [r13] 42 [r14]
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 40 [r12] 41 [r13] 42 [r14]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 40 [r12] 41 [r13] 42 [r14]

( 0 )->[2]->( 5 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 40 [r12] 41 [r13] 42 [r14]
;; lr  use 	 3 [bx] 6 [bp] 7 [sp] 40 [r12] 41 [r13] 42 [r14]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 41 [r13] 42 [r14] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 40 [r12] 41 [r13] 42 [r14]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 41 [r13] 42 [r14]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r13] 42 [r14]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r13] 42 [r14]

( 5 )->[3]->( 4 7 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r13] 42 [r14]
;; lr  use 	 3 [bx] 6 [bp] 7 [sp] 41 [r13] 42 [r14]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r13] 42 [r14]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 17 [flags] 40 [r12]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 40 [r12] 42 [r14]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 40 [r12] 42 [r14]

( 3 6 )->[4]->( 5 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 40 [r12] 42 [r14]
;; lr  use 	 6 [bp] 7 [sp] 40 [r12]
;; lr  def 	 6 [bp] 41 [r13]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 40 [r12] 42 [r14]
;; live  gen 	 6 [bp] 41 [r13]
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r13] 42 [r14]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r13] 42 [r14]

( 4 2 )->[5]->( 6 3 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r13] 42 [r14]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r13] 42 [r14]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r13] 42 [r14]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r13] 42 [r14]

( 5 )->[6]->( 4 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r13] 42 [r14]
;; lr  use 	 3 [bx] 6 [bp] 7 [sp] 41 [r13] 42 [r14]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r13] 42 [r14]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 40 [r12]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 40 [r12] 42 [r14]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 40 [r12] 42 [r14]

( 3 )->[7]->( 1 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 40 [r12] 41 [r13] 42 [r14] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 40 [r12] 41 [r13] 42 [r14]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 40 [r12] 41 [r13] 42 [r14]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 40 [r12] 41 [r13] 42 [r14]

( 7 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(3){ }u-1(6){ }u-1(7){ }u-1(40){ }u-1(41){ }u-1(42){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 40 [r12] 41 [r13] 42 [r14]
;; lr  use 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 40 [r12] 41 [r13] 42 [r14]
;; lr  def 	
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 40 [r12] 41 [r13] 42 [r14]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 98 to worklist
  Adding insn 17 to worklist
  Adding insn 78 to worklist
  Adding insn 77 to worklist
  Adding insn 76 to worklist
  Adding insn 75 to worklist
  Adding insn 74 to worklist
  Adding insn 33 to worklist
  Adding insn 30 to worklist
  Adding insn 22 to worklist
  Adding insn 101 to worklist
  Adding insn 52 to worklist
  Adding insn 86 to worklist
  Adding insn 59 to worklist
  Adding insn 41 to worklist
Finished finding needed instructions:
processing block 4 lr out =  3 [bx] 6 [bp] 7 [sp] 41 [r13] 42 [r14]
  Adding insn 4 to worklist
  Adding insn 3 to worklist
processing block 6 lr out =  3 [bx] 6 [bp] 7 [sp] 40 [r12] 42 [r14]
  Adding insn 9 to worklist
  Adding insn 8 to worklist
  Adding insn 53 to worklist
  Adding insn 93 to worklist
  Adding insn 50 to worklist
  Adding insn 49 to worklist
  Adding insn 47 to worklist
processing block 7 lr out =  0 [ax] 3 [bx] 6 [bp] 7 [sp] 40 [r12] 41 [r13] 42 [r14]
  Adding insn 85 to worklist
  Adding insn 84 to worklist
  Adding insn 83 to worklist
  Adding insn 82 to worklist
  Adding insn 81 to worklist
  Adding insn 92 to worklist
  Adding insn 40 to worklist
processing block 3 lr out =  3 [bx] 6 [bp] 7 [sp] 40 [r12] 42 [r14]
  Adding insn 32 to worklist
  Adding insn 31 to worklist
  Adding insn 94 to worklist
  Adding insn 28 to worklist
  Adding insn 27 to worklist
  Adding insn 25 to worklist
  Adding insn 73 to worklist
processing block 5 lr out =  3 [bx] 6 [bp] 7 [sp] 41 [r13] 42 [r14]
  Adding insn 21 to worklist
processing block 2 lr out =  3 [bx] 6 [bp] 7 [sp] 41 [r13] 42 [r14]
  Adding insn 64 to worklist
  Adding insn 97 to worklist
  Adding insn 6 to worklist
  Adding insn 96 to worklist
  Adding insn 95 to worklist
  Adding insn 15 to worklist
  Adding insn 13 to worklist
  Adding insn 12 to worklist
df_worklist_dataflow_doublequeue: n_basic_blocks 8 n_edges 9 count 11 (  1.4)
;;   ======================================================
;;   -- basic block 2 from 74 to 98 -- after reload
;;   ======================================================

;;	  0--> b  0: i  74 [--sp]=r14                              :hsw_decodern,(hsw_p4+hsw_p237)
;;	  0--> b  0: i  12 dx=0xa                                  :hsw_decodern,hsw_p0156
;;	  0--> b  0: i  13 si=`*.LC0'                              :hsw_decodern,hsw_p1|hsw_p5
;;	  0--> b  0: i  95 {ax=0;clobber flags;}                   :hsw_decodern,hsw_p0156
;;	  1--> b  0: i  75 [--sp]=r13                              :hsw_decodern,(hsw_p4+hsw_p237)
;;	  1--> b  0: i  15 di=0x2                                  :hsw_decodern,hsw_p0156
;;	  1--> b  0: i  97 {r13=0;clobber flags;}                  :hsw_decodern,hsw_p0156
;;	  1--> b  0: i  64 r14=`*.LC1'                             :hsw_decodern,hsw_p1|hsw_p5
;;	  2--> b  0: i  76 [--sp]=r12                              :hsw_decodern,(hsw_p4+hsw_p237)
;;	  3--> b  0: i  77 [--sp]=bp                               :hsw_decodern,(hsw_p4+hsw_p237)
;;	  3--> b  0: i   6 bp=0x1                                  :hsw_decodern,hsw_p0156
;;	  4--> b  0: i  78 [--sp]=bx                               :hsw_decodern,(hsw_p4+hsw_p237)
;;	  4--> b  0: i  96 {bx=0;clobber flags;}                   :hsw_decodern,hsw_p0156
;;	  7--> b  0: i  17 ax=call [`__printf_chk']                :hsw_decoder0
;;	  7--> b  0: i  98 pc=L35                                  :hsw_decodern,hsw_p6
;;	Ready list (final):  
;;   total time = 7
;;   new head = 74
;;   new tail = 98

;;   ======================================================
;;   -- basic block 3 from 73 to 33 -- after reload
;;   ======================================================

;;	  0--> b  0: i  73 r12=r13+bp                              :hsw_decodern,hsw_p1|hsw_p5
;;	  0--> b  0: i  27 si=r14                                  :hsw_decodern,hsw_p0156
;;	  0--> b  0: i  28 di=0x2                                  :hsw_decodern,hsw_p0156
;;	  0--> b  0: i  94 {ax=0;clobber flags;}                   :hsw_decodern,hsw_p0156
;;	  1--> b  0: i  25 dx=r12                                  :hsw_decodern,hsw_p0156
;;	  1--> b  0: i  31 {bx=bx+0x1;clobber flags;}              :hsw_decodern,hsw_p0156
;;	  2--> b  0: i  30 ax=call [`__printf_chk']                :hsw_decoder0
;;	  2--> b  0: i  32 flags=cmp(bx,0xa)                       :hsw_decodern,hsw_p0156
;;	  2--> b  0: i  33 pc={(flags==0)?L38:pc}                  :hsw_decodern,hsw_p6
;;	Ready list (final):  
;;   total time = 2
;;   new head = 73
;;   new tail = 33

;;   ======================================================
;;   -- basic block 4 from 3 to 4 -- after reload
;;   ======================================================

;;	  0--> b  0: i   3 r13=bp                                  :hsw_decodern,hsw_p0156
;;	  0--> b  0: i   4 bp=r12                                  :hsw_decodern,hsw_p0156
;;	Ready list (final):  
;;   total time = 0
;;   new head = 3
;;   new tail = 4

;;   ======================================================
;;   -- basic block 5 from 21 to 22 -- after reload
;;   ======================================================

;;	  0--> b  0: i  21 flags=cmp(bx,0x1)                       :hsw_decodern,hsw_p0156
;;	  0--> b  0: i  22 pc={(flags>0)?L100:pc}                  :hsw_decodern,hsw_p6
;;	Ready list (final):  
;;   total time = 0
;;   new head = 21
;;   new tail = 22

;;   ======================================================
;;   -- basic block 6 from 47 to 101 -- after reload
;;   ======================================================

;;	  0--> b  0: i  47 dx=bx                                   :hsw_decodern,hsw_p0156
;;	  0--> b  0: i  49 si=r14                                  :hsw_decodern,hsw_p0156
;;	  0--> b  0: i  50 di=0x2                                  :hsw_decodern,hsw_p0156
;;	  0--> b  0: i  93 {ax=0;clobber flags;}                   :hsw_decodern,hsw_p0156
;;	  1--> b  0: i  52 ax=call [`__printf_chk']                :hsw_decoder0
;;	  1--> b  0: i   8 r12=bp                                  :hsw_decodern,hsw_p0156
;;	  1--> b  0: i  53 {bx=bx+0x1;clobber flags;}              :hsw_decodern,hsw_p0156
;;	  1--> b  0: i   9 bp=r13                                  :hsw_decodern,hsw_p0156
;;	  2--> b  0: i 101 pc=L54                                  :hsw_decodern,hsw_p6
;;	Ready list (final):  
;;   total time = 2
;;   new head = 47
;;   new tail = 101

;;   ======================================================
;;   -- basic block 7 from 40 to 86 -- after reload
;;   ======================================================

;;	  0--> b  0: i  40 di=0xa                                  :hsw_decodern,hsw_p0156
;;	  1--> b  0: i  41 ax=call [`putchar']                     :hsw_decoder0
;;	  1--> b  0: i  81 bx=[sp++]                               :hsw_decodern,(hsw_p23+hsw_p0156)
;;	  1--> b  0: i  92 {ax=0;clobber flags;}                   :hsw_decodern,hsw_p0156
;;	  1--> b  0: i  82 bp=[sp++]                               :hsw_decodern,(hsw_p23+hsw_p0156)
;;	  2--> b  0: i  59 use ax                                  :nothing
;;	  2--> b  0: i  83 r12=[sp++]                              :hsw_decodern,(hsw_p23+hsw_p0156)
;;	  2--> b  0: i  84 r13=[sp++]                              :hsw_decodern,(hsw_p23+hsw_p0156)
;;	  3--> b  0: i  85 r14=[sp++]                              :hsw_decodern,(hsw_p23+hsw_p0156)
;;	  4--> b  0: i  86 simple_return                           :hsw_decoder0
;;	Ready list (final):  
;;   total time = 4
;;   new head = 40
;;   new tail = 86



starting the processing of deferred insns
ending the processing of deferred insns


main

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9] 40 [r12] 41 [r13] 42 [r14]
;;  exit block uses 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 40 [r12] 41 [r13] 42 [r14]
;;  regs ever live 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 40 [r12] 41 [r13] 42 [r14]
;;  ref usage 	r0={9d,5u} r1={8d,3u} r2={5d} r3={5d,7u} r4={8d,3u} r5={9d,4u} r6={5d,5u} r7={11d,21u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r17={14d,2u} r18={4d} r20={5d} r21={5d} r22={5d} r23={5d} r24={5d} r25={5d} r26={5d} r27={5d} r28={4d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={5d} r37={5d} r38={4d} r39={4d} r40={4d,4u} r41={4d,4u} r42={3d,4u} r44={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} 
;;    total ref usage 401{339d,62u,0e} in 47{43 regular + 4 call} insns.
(note 1 0 10 NOTE_INSN_DELETED)
(note 10 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 10 74 2 NOTE_INSN_FUNCTION_BEG)
(insn/f:TI 74 2 12 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 42 r14)) "fibonacci.c":5:12 56 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 42 r14)
        (nil)))
(insn 12 74 13 2 (set (reg:SI 1 dx)
        (const_int 10 [0xa])) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 83 {*movsi_internal}
     (nil))
(insn 13 12 95 2 (set (reg/f:DI 4 si [87])
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7892cf25fa20 *.LC0>)) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 82 {*movdi_internal}
     (expr_list:REG_EQUIV (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7892cf25fa20 *.LC0>)
        (nil)))
(insn 95 13 75 2 (parallel [
            (set (reg:DI 0 ax)
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 72 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn/f:TI 75 95 15 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 41 r13)) "fibonacci.c":5:12 56 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 41 r13)
        (nil)))
(insn 15 75 97 2 (set (reg:SI 5 di)
        (const_int 2 [0x2])) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 83 {*movsi_internal}
     (nil))
(insn 97 15 64 2 (parallel [
            (set (reg:DI 41 r13 [orig:85 a ] [85])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) "fibonacci.c":6:9 72 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 64 97 76 2 (set (reg/f:DI 42 r14 [91])
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7892cf25fab0 *.LC1>)) 82 {*movdi_internal}
     (expr_list:REG_EQUIV (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7892cf25fab0 *.LC1>)
        (nil)))
(insn/f:TI 76 64 77 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 40 r12)) "fibonacci.c":5:12 56 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 40 r12)
        (nil)))
(insn/f:TI 77 76 6 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 6 bp)) "fibonacci.c":5:12 56 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 6 bp)
        (nil)))
(insn 6 77 78 2 (set (reg/v:SI 6 bp [orig:84 a ] [84])
        (const_int 1 [0x1])) "fibonacci.c":6:16 83 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))
(insn/f:TI 78 6 79 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 3 bx)) "fibonacci.c":5:12 56 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 3 bx)
        (nil)))
(note 79 78 96 2 NOTE_INSN_PROLOGUE_END)
(insn 96 79 17 2 (parallel [
            (set (reg:DI 3 bx [orig:83 i ] [83])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) "fibonacci.c":10:12 72 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(call_insn:TI 17 96 98 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__printf_chk") [flags 0x41]  <function_decl 0x7892cf559800 __printf_chk>) [0 __builtin___printf_chk S1 A8])
            (const_int 0 [0]))) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 1013 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("__printf_chk") [flags 0x41]  <function_decl 0x7892cf559800 __printf_chk>)
                        (nil))))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:SI (use (reg:SI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (nil))))))
(jump_insn 98 17 99 2 (set (pc)
        (label_ref 35)) 996 {jump}
     (nil)
 -> 35)
(barrier 99 98 100)
(code_label 100 99 23 3 9 (nil) [1 uses])
(note 23 100 73 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn:TI 73 23 27 3 (set (reg/v:SI 40 r12 [orig:82 b ] [82])
        (plus:SI (reg/v:SI 41 r13 [orig:85 a ] [85])
            (reg/v:SI 6 bp [orig:84 a ] [84]))) "fibonacci.c":14:18 240 {*leasi}
     (expr_list:REG_DEAD (reg/v:SI 41 r13 [orig:85 a ] [85])
        (nil)))
(insn 27 73 28 3 (set (reg:DI 4 si)
        (reg/f:DI 42 r14 [91])) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 82 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7892cf25fab0 *.LC1>)
        (nil)))
(insn 28 27 94 3 (set (reg:SI 5 di)
        (const_int 2 [0x2])) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 83 {*movsi_internal}
     (nil))
(insn 94 28 25 3 (parallel [
            (set (reg:DI 0 ax)
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 72 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 25 94 31 3 (set (reg:SI 1 dx)
        (reg/v:SI 40 r12 [orig:82 b ] [82])) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 83 {*movsi_internal}
     (nil))
(insn 31 25 30 3 (parallel [
            (set (reg/v:SI 3 bx [orig:83 i ] [83])
                (plus:SI (reg/v:SI 3 bx [orig:83 i ] [83])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "fibonacci.c":10:38 discrim 2 246 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(call_insn:TI 30 31 32 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__printf_chk") [flags 0x41]  <function_decl 0x7892cf559800 __printf_chk>) [0 __builtin___printf_chk S1 A8])
            (const_int 0 [0]))) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 1013 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("__printf_chk") [flags 0x41]  <function_decl 0x7892cf559800 __printf_chk>)
                        (nil))))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:SI (use (reg:SI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (nil))))))
(insn 32 30 33 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 3 bx [orig:83 i ] [83])
            (const_int 10 [0xa]))) "fibonacci.c":10:19 discrim 1 11 {*cmpsi_1}
     (nil))
(jump_insn 33 32 54 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 38)
            (pc))) "fibonacci.c":10:19 discrim 1 995 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 122003916 (nil)))
 -> 38)
(code_label 54 33 34 4 5 (nil) [1 uses])
(note 34 54 3 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn:TI 3 34 4 4 (set (reg/v:SI 41 r13 [orig:85 a ] [85])
        (reg/v:SI 6 bp [orig:84 a ] [84])) "fibonacci.c":5:12 83 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 6 bp [orig:84 a ] [84])
        (nil)))
(insn 4 3 35 4 (set (reg/v:SI 6 bp [orig:84 a ] [84])
        (reg/v:SI 40 r12 [orig:82 b ] [82])) "fibonacci.c":5:12 83 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 40 r12 [orig:82 b ] [82])
        (nil)))
(code_label 35 4 18 5 4 (nil) [1 uses])
(note 18 35 21 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn:TI 21 18 22 5 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 3 bx [orig:83 i ] [83])
            (const_int 1 [0x1]))) "fibonacci.c":11:12 11 {*cmpsi_1}
     (nil))
(jump_insn 22 21 46 5 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 100)
            (pc))) "fibonacci.c":11:12 995 {*jcc}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (int_list:REG_BR_PROB 858993460 (nil)))
 -> 100)
(note 46 22 47 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn:TI 47 46 49 6 (set (reg:SI 1 dx)
        (reg/v:SI 3 bx [orig:83 i ] [83])) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 83 {*movsi_internal}
     (nil))
(insn 49 47 50 6 (set (reg:DI 4 si)
        (reg/f:DI 42 r14 [91])) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 82 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7892cf25fab0 *.LC1>)
        (nil)))
(insn 50 49 93 6 (set (reg:SI 5 di)
        (const_int 2 [0x2])) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 83 {*movsi_internal}
     (nil))
(insn 93 50 52 6 (parallel [
            (set (reg:DI 0 ax)
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 72 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(call_insn:TI 52 93 8 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__printf_chk") [flags 0x41]  <function_decl 0x7892cf559800 __printf_chk>) [0 __builtin___printf_chk S1 A8])
            (const_int 0 [0]))) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 1013 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("__printf_chk") [flags 0x41]  <function_decl 0x7892cf559800 __printf_chk>)
                        (nil))))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:SI (use (reg:SI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (nil))))))
(insn 8 52 53 6 (set (reg/v:SI 40 r12 [orig:82 b ] [82])
        (reg/v:SI 6 bp [orig:84 a ] [84])) "fibonacci.c":10:38 discrim 2 83 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 6 bp [orig:84 a ] [84])
        (nil)))
(insn 53 8 9 6 (parallel [
            (set (reg/v:SI 3 bx [orig:83 i ] [83])
                (plus:SI (reg/v:SI 3 bx [orig:83 i ] [83])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "fibonacci.c":10:38 discrim 2 246 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 9 53 101 6 (set (reg/v:SI 6 bp [orig:84 a ] [84])
        (reg/v:SI 41 r13 [orig:85 a ] [85])) "fibonacci.c":10:38 discrim 2 83 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 41 r13 [orig:85 a ] [85])
        (nil)))
(jump_insn:TI 101 9 102 6 (set (pc)
        (label_ref 54)) 996 {jump}
     (nil)
 -> 54)
(barrier 102 101 38)
(code_label 38 102 39 7 3 (nil) [1 uses])
(note 39 38 40 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn:TI 40 39 41 7 (set (reg:SI 5 di)
        (const_int 10 [0xa])) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 83 {*movsi_internal}
     (nil))
(call_insn:TI 41 40 103 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("putchar") [flags 0x41]  <function_decl 0x7892cf52fd00 __builtin_putchar>) [0 __builtin_putchar S1 A8])
            (const_int 0 [0]))) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 1013 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (expr_list:REG_CALL_DECL (symbol_ref:DI ("putchar") [flags 0x41]  <function_decl 0x7892cf52fd00 __builtin_putchar>)
                (nil))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(note 103 41 81 7 NOTE_INSN_EPILOGUE_BEG)
(insn/f 81 103 92 7 (set (reg:DI 3 bx)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) "fibonacci.c":22:1 64 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn 92 81 82 7 (parallel [
            (set (reg:DI 0 ax)
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) "fibonacci.c":22:1 72 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn/f 82 92 59 7 (set (reg:DI 6 bp)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) "fibonacci.c":22:1 64 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn 59 82 83 7 (use (reg/i:SI 0 ax)) "fibonacci.c":22:1 -1
     (nil))
(insn/f:TI 83 59 84 7 (set (reg:DI 40 r12)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) "fibonacci.c":22:1 64 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f 84 83 85 7 (set (reg:DI 41 r13)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) "fibonacci.c":22:1 64 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 85 84 86 7 (set (reg:DI 42 r14)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) "fibonacci.c":22:1 64 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(jump_insn:TI 86 85 89 7 (simple_return) "fibonacci.c":22:1 1026 {simple_return_internal}
     (nil)
 -> simple_return)
(barrier 89 86 72)
(note 72 89 0 NOTE_INSN_DELETED)
