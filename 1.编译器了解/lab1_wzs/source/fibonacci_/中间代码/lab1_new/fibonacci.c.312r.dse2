
;; Function main (main, funcdef_no=23, decl_uid=3375, cgraph_uid=24, symbol_order=23) (executed once)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 8 n_edges 9 count 11 (  1.4)
df_worklist_dataflow_doublequeue: n_basic_blocks 8 n_edges 9 count 11 (  1.4)
dse: local deletions = 0, global deletions = 0
starting the processing of deferred insns
ending the processing of deferred insns


main

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9] 40 [r12] 41 [r13] 42 [r14]
;;  exit block uses 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 40 [r12] 41 [r13] 42 [r14]
;;  regs ever live 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags] 40 [r12] 41 [r13] 42 [r14]
;;  ref usage 	r0={9d,5u} r1={8d,3u} r2={5d} r3={5d,7u} r4={8d,3u} r5={9d,4u} r6={5d,5u} r7={11d,21u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r17={8d,2u} r18={4d} r20={5d} r21={5d} r22={5d} r23={5d} r24={5d} r25={5d} r26={5d} r27={5d} r28={4d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={5d} r37={5d} r38={4d} r39={4d} r40={4d,4u} r41={4d,4u} r42={3d,4u} r44={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} 
;;    total ref usage 395{333d,62u,0e} in 47{43 regular + 4 call} insns.
(note 1 0 10 NOTE_INSN_DELETED)
(note 10 1 74 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 74 10 75 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 42 r14)) "fibonacci.c":5:12 -1
     (expr_list:REG_DEAD (reg:DI 42 r14)
        (nil)))
(insn/f 75 74 76 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 41 r13)) "fibonacci.c":5:12 -1
     (expr_list:REG_DEAD (reg:DI 41 r13)
        (nil)))
(insn/f 76 75 77 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 40 r12)) "fibonacci.c":5:12 -1
     (expr_list:REG_DEAD (reg:DI 40 r12)
        (nil)))
(insn/f 77 76 78 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 6 bp)) "fibonacci.c":5:12 -1
     (expr_list:REG_DEAD (reg:DI 6 bp)
        (nil)))
(insn/f 78 77 79 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 3 bx)) "fibonacci.c":5:12 -1
     (expr_list:REG_DEAD (reg:DI 3 bx)
        (nil)))
(note 79 78 2 2 NOTE_INSN_PROLOGUE_END)
(note 2 79 12 2 NOTE_INSN_FUNCTION_BEG)
(insn 12 2 13 2 (set (reg:SI 1 dx)
        (const_int 10 [0xa])) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 83 {*movsi_internal}
     (nil))
(insn 13 12 15 2 (set (reg/f:DI 4 si [87])
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7892cf25fa20 *.LC0>)) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 82 {*movdi_internal}
     (expr_list:REG_EQUIV (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7892cf25fa20 *.LC0>)
        (nil)))
(insn 15 13 16 2 (set (reg:SI 5 di)
        (const_int 2 [0x2])) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 83 {*movsi_internal}
     (nil))
(insn 16 15 17 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 85 {*movqi_internal}
     (nil))
(call_insn 17 16 5 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__printf_chk") [flags 0x41]  <function_decl 0x7892cf559800 __printf_chk>) [0 __builtin___printf_chk S1 A8])
            (const_int 0 [0]))) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 1013 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("__printf_chk") [flags 0x41]  <function_decl 0x7892cf559800 __printf_chk>)
                        (nil))))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:SI (use (reg:SI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (nil))))))
(insn 5 17 6 2 (set (reg/v:SI 3 bx [orig:83 i ] [83])
        (const_int 0 [0])) "fibonacci.c":10:12 83 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 0 [0])
        (nil)))
(insn 6 5 7 2 (set (reg/v:SI 6 bp [orig:84 a ] [84])
        (const_int 1 [0x1])) "fibonacci.c":6:16 83 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))
(insn 7 6 64 2 (set (reg/v:SI 41 r13 [orig:85 a ] [85])
        (const_int 0 [0])) "fibonacci.c":6:9 83 {*movsi_internal}
     (expr_list:REG_EQUAL (const_int 0 [0])
        (nil)))
(insn 64 7 35 2 (set (reg/f:DI 42 r14 [91])
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7892cf25fab0 *.LC1>)) 82 {*movdi_internal}
     (expr_list:REG_EQUIV (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7892cf25fab0 *.LC1>)
        (nil)))
(code_label 35 64 18 3 4 (nil) [1 uses])
(note 18 35 21 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 21 18 22 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 3 bx [orig:83 i ] [83])
            (const_int 1 [0x1]))) "fibonacci.c":11:12 11 {*cmpsi_1}
     (nil))
(jump_insn 22 21 23 3 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 45)
            (pc))) "fibonacci.c":11:12 995 {*jcc}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (int_list:REG_BR_PROB 214748372 (nil)))
 -> 45)
(note 23 22 73 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 73 23 25 4 (set (reg/v:SI 40 r12 [orig:82 b ] [82])
        (plus:SI (reg/v:SI 41 r13 [orig:85 a ] [85])
            (reg/v:SI 6 bp [orig:84 a ] [84]))) "fibonacci.c":14:18 240 {*leasi}
     (expr_list:REG_DEAD (reg/v:SI 41 r13 [orig:85 a ] [85])
        (nil)))
(insn 25 73 27 4 (set (reg:SI 1 dx)
        (reg/v:SI 40 r12 [orig:82 b ] [82])) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 83 {*movsi_internal}
     (nil))
(insn 27 25 28 4 (set (reg:DI 4 si)
        (reg/f:DI 42 r14 [91])) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 82 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7892cf25fab0 *.LC1>)
        (nil)))
(insn 28 27 29 4 (set (reg:SI 5 di)
        (const_int 2 [0x2])) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 83 {*movsi_internal}
     (nil))
(insn 29 28 30 4 (set (reg:QI 0 ax)
        (const_int 0 [0])) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 85 {*movqi_internal}
     (nil))
(call_insn 30 29 31 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__printf_chk") [flags 0x41]  <function_decl 0x7892cf559800 __printf_chk>) [0 __builtin___printf_chk S1 A8])
            (const_int 0 [0]))) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 1013 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("__printf_chk") [flags 0x41]  <function_decl 0x7892cf559800 __printf_chk>)
                        (nil))))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:SI (use (reg:SI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (nil))))))
(insn 31 30 32 4 (parallel [
            (set (reg/v:SI 3 bx [orig:83 i ] [83])
                (plus:SI (reg/v:SI 3 bx [orig:83 i ] [83])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "fibonacci.c":10:38 discrim 2 246 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 32 31 33 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 3 bx [orig:83 i ] [83])
            (const_int 10 [0xa]))) "fibonacci.c":10:19 discrim 1 11 {*cmpsi_1}
     (nil))
(jump_insn 33 32 54 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 38)
            (pc))) "fibonacci.c":10:19 discrim 1 995 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 122003916 (nil)))
 -> 38)
(code_label 54 33 34 5 5 (nil) [1 uses])
(note 34 54 3 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 3 34 4 5 (set (reg/v:SI 41 r13 [orig:85 a ] [85])
        (reg/v:SI 6 bp [orig:84 a ] [84])) "fibonacci.c":5:12 83 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 6 bp [orig:84 a ] [84])
        (nil)))
(insn 4 3 65 5 (set (reg/v:SI 6 bp [orig:84 a ] [84])
        (reg/v:SI 40 r12 [orig:82 b ] [82])) "fibonacci.c":5:12 83 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 40 r12 [orig:82 b ] [82])
        (nil)))
(jump_insn 65 4 66 5 (set (pc)
        (label_ref 35)) 996 {jump}
     (nil)
 -> 35)
(barrier 66 65 45)
(code_label 45 66 46 6 2 (nil) [1 uses])
(note 46 45 47 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 47 46 49 6 (set (reg:SI 1 dx)
        (reg/v:SI 3 bx [orig:83 i ] [83])) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 83 {*movsi_internal}
     (nil))
(insn 49 47 50 6 (set (reg:DI 4 si)
        (reg/f:DI 42 r14 [91])) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 82 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7892cf25fab0 *.LC1>)
        (nil)))
(insn 50 49 51 6 (set (reg:SI 5 di)
        (const_int 2 [0x2])) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 83 {*movsi_internal}
     (nil))
(insn 51 50 52 6 (set (reg:QI 0 ax)
        (const_int 0 [0])) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 85 {*movqi_internal}
     (nil))
(call_insn 52 51 53 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__printf_chk") [flags 0x41]  <function_decl 0x7892cf559800 __printf_chk>) [0 __builtin___printf_chk S1 A8])
            (const_int 0 [0]))) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 1013 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("__printf_chk") [flags 0x41]  <function_decl 0x7892cf559800 __printf_chk>)
                        (nil))))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:SI (use (reg:SI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (nil))))))
(insn 53 52 8 6 (parallel [
            (set (reg/v:SI 3 bx [orig:83 i ] [83])
                (plus:SI (reg/v:SI 3 bx [orig:83 i ] [83])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "fibonacci.c":10:38 discrim 2 246 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 8 53 9 6 (set (reg/v:SI 40 r12 [orig:82 b ] [82])
        (reg/v:SI 6 bp [orig:84 a ] [84])) "fibonacci.c":10:38 discrim 2 83 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 6 bp [orig:84 a ] [84])
        (nil)))
(insn 9 8 70 6 (set (reg/v:SI 6 bp [orig:84 a ] [84])
        (reg/v:SI 41 r13 [orig:85 a ] [85])) "fibonacci.c":10:38 discrim 2 83 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 41 r13 [orig:85 a ] [85])
        (nil)))
(jump_insn 70 9 71 6 (set (pc)
        (label_ref 54)) 996 {jump}
     (nil)
 -> 54)
(barrier 71 70 38)
(code_label 38 71 39 7 3 (nil) [1 uses])
(note 39 38 40 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 40 39 41 7 (set (reg:SI 5 di)
        (const_int 10 [0xa])) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 83 {*movsi_internal}
     (nil))
(call_insn 41 40 58 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("putchar") [flags 0x41]  <function_decl 0x7892cf52fd00 __builtin_putchar>) [0 __builtin_putchar S1 A8])
            (const_int 0 [0]))) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":86:10 1013 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_UNUSED (reg:SI 0 ax)
            (expr_list:REG_CALL_DECL (symbol_ref:DI ("putchar") [flags 0x41]  <function_decl 0x7892cf52fd00 __builtin_putchar>)
                (nil))))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 58 41 59 7 (set (reg/i:SI 0 ax)
        (const_int 0 [0])) "fibonacci.c":22:1 83 {*movsi_internal}
     (nil))
(insn 59 58 80 7 (use (reg/i:SI 0 ax)) "fibonacci.c":22:1 -1
     (nil))
(note 80 59 81 7 NOTE_INSN_EPILOGUE_BEG)
(insn/f 81 80 82 7 (set (reg:DI 3 bx)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) "fibonacci.c":22:1 -1
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f 82 81 83 7 (set (reg:DI 6 bp)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) "fibonacci.c":22:1 -1
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f 83 82 84 7 (set (reg:DI 40 r12)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) "fibonacci.c":22:1 -1
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f 84 83 85 7 (set (reg:DI 41 r13)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) "fibonacci.c":22:1 -1
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f 85 84 86 7 (set (reg:DI 42 r14)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) "fibonacci.c":22:1 -1
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(jump_insn 86 85 89 7 (simple_return) "fibonacci.c":22:1 -1
     (nil)
 -> simple_return)
(barrier 89 86 72)
(note 72 89 0 NOTE_INSN_DELETED)
