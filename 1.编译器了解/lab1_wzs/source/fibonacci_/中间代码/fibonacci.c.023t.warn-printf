
;; Function main (main, funcdef_no=0, decl_uid=3174, cgraph_uid=1, symbol_order=0)

;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9
;;
;; Loop 1
;;  header 7, latch 6
;;  depth 1, outer 0
;;  nodes: 7 6 4 5 3
;; 2 succs { 7 }
;; 3 succs { 4 5 }
;; 4 succs { 6 }
;; 5 succs { 6 }
;; 6 succs { 7 }
;; 7 succs { 3 8 }
;; 8 succs { 9 }
;; 9 succs { 1 }
fibonacci.c:8: printf: objsize = 9223372036854775807, fmtstr = "Fibonacci Series up to %d terms:
"
  Directive 1 at offset 0: "Fibonacci Series up to ", length = 23
    Result: 23, 23, 23, 23 (23, 23, 23, 23)
  Directive 2 at offset 23: "%d"
    Result: 2, 2, 2, 2 (25, 25, 25, 25)
  Directive 3 at offset 25: " terms:
", length = 8
    Result: 8, 8, 8, 8 (33, 33, 33, 33)
  Directive 4 at offset 33: "", length = 1
fibonacci.c:18: printf: objsize = 9223372036854775807, fmtstr = "%d "
  Directive 1 at offset 0: "%d"
    Result: 1, 1, 11, 11 (1, 1, 11, 11)
  Directive 2 at offset 2: " ", length = 1
    Result: 1, 1, 1, 1 (2, 2, 12, 12)
  Directive 3 at offset 3: "", length = 1
int main ()
{
  int i;
  int next;
  int b;
  int a;
  int D.3188;
  int _14;

  <bb 2> :
  a_8 = 0;
  b_9 = 1;
  printf ("Fibonacci Series up to %d terms:\n", 10);
  i_12 = 0;
  goto <bb 7>; [INV]

  <bb 3> :
  if (i_6 <= 1)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  next_18 = i_6;
  goto <bb 6>; [INV]

  <bb 5> :
  next_15 = a_2 + b_4;
  a_16 = b_4;
  b_17 = next_15;

  <bb 6> :
  # a_1 = PHI <a_2(4), a_16(5)>
  # b_3 = PHI <b_4(4), b_17(5)>
  # next_5 = PHI <next_18(4), next_15(5)>
  printf ("%d ", next_5);
  i_20 = i_6 + 1;

  <bb 7> :
  # a_2 = PHI <a_8(2), a_1(6)>
  # b_4 = PHI <b_9(2), b_3(6)>
  # i_6 = PHI <i_12(2), i_20(6)>
  if (i_6 <= 9)
    goto <bb 3>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  __builtin_putchar (10);
  _14 = 0;

  <bb 9> :
<L6>:
  return _14;

}


